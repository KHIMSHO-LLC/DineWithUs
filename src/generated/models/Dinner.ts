
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Dinner` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Dinner
 * 
 */
export type DinnerModel = runtime.Types.Result.DefaultSelection<Prisma.$DinnerPayload>

export type AggregateDinner = {
  _count: DinnerCountAggregateOutputType | null
  _avg: DinnerAvgAggregateOutputType | null
  _sum: DinnerSumAggregateOutputType | null
  _min: DinnerMinAggregateOutputType | null
  _max: DinnerMaxAggregateOutputType | null
}

export type DinnerAvgAggregateOutputType = {
  price: number | null
  duration: number | null
  capacity: number | null
  available: number | null
  rating: number | null
  reviewCount: number | null
}

export type DinnerSumAggregateOutputType = {
  price: number | null
  duration: number | null
  capacity: number | null
  available: number | null
  rating: number | null
  reviewCount: number | null
}

export type DinnerMinAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  price: number | null
  currency: string | null
  date: Date | null
  time: string | null
  duration: number | null
  capacity: number | null
  available: number | null
  images: string | null
  cuisine: string | null
  dietary: string | null
  rating: number | null
  reviewCount: number | null
  instantBook: boolean | null
  menu: string | null
  included: string | null
  houseRules: string | null
  location: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  hostId: string | null
}

export type DinnerMaxAggregateOutputType = {
  id: string | null
  title: string | null
  description: string | null
  price: number | null
  currency: string | null
  date: Date | null
  time: string | null
  duration: number | null
  capacity: number | null
  available: number | null
  images: string | null
  cuisine: string | null
  dietary: string | null
  rating: number | null
  reviewCount: number | null
  instantBook: boolean | null
  menu: string | null
  included: string | null
  houseRules: string | null
  location: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  hostId: string | null
}

export type DinnerCountAggregateOutputType = {
  id: number
  title: number
  description: number
  price: number
  currency: number
  date: number
  time: number
  duration: number
  capacity: number
  available: number
  images: number
  cuisine: number
  dietary: number
  rating: number
  reviewCount: number
  instantBook: number
  menu: number
  included: number
  houseRules: number
  location: number
  isActive: number
  createdAt: number
  updatedAt: number
  hostId: number
  _all: number
}


export type DinnerAvgAggregateInputType = {
  price?: true
  duration?: true
  capacity?: true
  available?: true
  rating?: true
  reviewCount?: true
}

export type DinnerSumAggregateInputType = {
  price?: true
  duration?: true
  capacity?: true
  available?: true
  rating?: true
  reviewCount?: true
}

export type DinnerMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  price?: true
  currency?: true
  date?: true
  time?: true
  duration?: true
  capacity?: true
  available?: true
  images?: true
  cuisine?: true
  dietary?: true
  rating?: true
  reviewCount?: true
  instantBook?: true
  menu?: true
  included?: true
  houseRules?: true
  location?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  hostId?: true
}

export type DinnerMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  price?: true
  currency?: true
  date?: true
  time?: true
  duration?: true
  capacity?: true
  available?: true
  images?: true
  cuisine?: true
  dietary?: true
  rating?: true
  reviewCount?: true
  instantBook?: true
  menu?: true
  included?: true
  houseRules?: true
  location?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  hostId?: true
}

export type DinnerCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  price?: true
  currency?: true
  date?: true
  time?: true
  duration?: true
  capacity?: true
  available?: true
  images?: true
  cuisine?: true
  dietary?: true
  rating?: true
  reviewCount?: true
  instantBook?: true
  menu?: true
  included?: true
  houseRules?: true
  location?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  hostId?: true
  _all?: true
}

export type DinnerAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Dinner to aggregate.
   */
  where?: Prisma.DinnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Dinners to fetch.
   */
  orderBy?: Prisma.DinnerOrderByWithRelationInput | Prisma.DinnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DinnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Dinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Dinners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Dinners
  **/
  _count?: true | DinnerCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DinnerAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DinnerSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DinnerMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DinnerMaxAggregateInputType
}

export type GetDinnerAggregateType<T extends DinnerAggregateArgs> = {
      [P in keyof T & keyof AggregateDinner]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDinner[P]>
    : Prisma.GetScalarType<T[P], AggregateDinner[P]>
}




export type DinnerGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DinnerWhereInput
  orderBy?: Prisma.DinnerOrderByWithAggregationInput | Prisma.DinnerOrderByWithAggregationInput[]
  by: Prisma.DinnerScalarFieldEnum[] | Prisma.DinnerScalarFieldEnum
  having?: Prisma.DinnerScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DinnerCountAggregateInputType | true
  _avg?: DinnerAvgAggregateInputType
  _sum?: DinnerSumAggregateInputType
  _min?: DinnerMinAggregateInputType
  _max?: DinnerMaxAggregateInputType
}

export type DinnerGroupByOutputType = {
  id: string
  title: string
  description: string
  price: number
  currency: string
  date: Date
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating: number
  reviewCount: number
  instantBook: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  hostId: string
  _count: DinnerCountAggregateOutputType | null
  _avg: DinnerAvgAggregateOutputType | null
  _sum: DinnerSumAggregateOutputType | null
  _min: DinnerMinAggregateOutputType | null
  _max: DinnerMaxAggregateOutputType | null
}

type GetDinnerGroupByPayload<T extends DinnerGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DinnerGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DinnerGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DinnerGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DinnerGroupByOutputType[P]>
      }
    >
  >



export type DinnerWhereInput = {
  AND?: Prisma.DinnerWhereInput | Prisma.DinnerWhereInput[]
  OR?: Prisma.DinnerWhereInput[]
  NOT?: Prisma.DinnerWhereInput | Prisma.DinnerWhereInput[]
  id?: Prisma.StringFilter<"Dinner"> | string
  title?: Prisma.StringFilter<"Dinner"> | string
  description?: Prisma.StringFilter<"Dinner"> | string
  price?: Prisma.FloatFilter<"Dinner"> | number
  currency?: Prisma.StringFilter<"Dinner"> | string
  date?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  time?: Prisma.StringFilter<"Dinner"> | string
  duration?: Prisma.IntFilter<"Dinner"> | number
  capacity?: Prisma.IntFilter<"Dinner"> | number
  available?: Prisma.IntFilter<"Dinner"> | number
  images?: Prisma.StringFilter<"Dinner"> | string
  cuisine?: Prisma.StringFilter<"Dinner"> | string
  dietary?: Prisma.StringFilter<"Dinner"> | string
  rating?: Prisma.FloatFilter<"Dinner"> | number
  reviewCount?: Prisma.IntFilter<"Dinner"> | number
  instantBook?: Prisma.BoolFilter<"Dinner"> | boolean
  menu?: Prisma.StringFilter<"Dinner"> | string
  included?: Prisma.StringFilter<"Dinner"> | string
  houseRules?: Prisma.StringFilter<"Dinner"> | string
  location?: Prisma.StringFilter<"Dinner"> | string
  isActive?: Prisma.BoolFilter<"Dinner"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  hostId?: Prisma.StringFilter<"Dinner"> | string
  host?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  bookings?: Prisma.BookingListRelationFilter
  reviews?: Prisma.ReviewListRelationFilter
}

export type DinnerOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  available?: Prisma.SortOrder
  images?: Prisma.SortOrder
  cuisine?: Prisma.SortOrder
  dietary?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  reviewCount?: Prisma.SortOrder
  instantBook?: Prisma.SortOrder
  menu?: Prisma.SortOrder
  included?: Prisma.SortOrder
  houseRules?: Prisma.SortOrder
  location?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  host?: Prisma.UserOrderByWithRelationInput
  bookings?: Prisma.BookingOrderByRelationAggregateInput
  reviews?: Prisma.ReviewOrderByRelationAggregateInput
}

export type DinnerWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DinnerWhereInput | Prisma.DinnerWhereInput[]
  OR?: Prisma.DinnerWhereInput[]
  NOT?: Prisma.DinnerWhereInput | Prisma.DinnerWhereInput[]
  title?: Prisma.StringFilter<"Dinner"> | string
  description?: Prisma.StringFilter<"Dinner"> | string
  price?: Prisma.FloatFilter<"Dinner"> | number
  currency?: Prisma.StringFilter<"Dinner"> | string
  date?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  time?: Prisma.StringFilter<"Dinner"> | string
  duration?: Prisma.IntFilter<"Dinner"> | number
  capacity?: Prisma.IntFilter<"Dinner"> | number
  available?: Prisma.IntFilter<"Dinner"> | number
  images?: Prisma.StringFilter<"Dinner"> | string
  cuisine?: Prisma.StringFilter<"Dinner"> | string
  dietary?: Prisma.StringFilter<"Dinner"> | string
  rating?: Prisma.FloatFilter<"Dinner"> | number
  reviewCount?: Prisma.IntFilter<"Dinner"> | number
  instantBook?: Prisma.BoolFilter<"Dinner"> | boolean
  menu?: Prisma.StringFilter<"Dinner"> | string
  included?: Prisma.StringFilter<"Dinner"> | string
  houseRules?: Prisma.StringFilter<"Dinner"> | string
  location?: Prisma.StringFilter<"Dinner"> | string
  isActive?: Prisma.BoolFilter<"Dinner"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  hostId?: Prisma.StringFilter<"Dinner"> | string
  host?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  bookings?: Prisma.BookingListRelationFilter
  reviews?: Prisma.ReviewListRelationFilter
}, "id">

export type DinnerOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  available?: Prisma.SortOrder
  images?: Prisma.SortOrder
  cuisine?: Prisma.SortOrder
  dietary?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  reviewCount?: Prisma.SortOrder
  instantBook?: Prisma.SortOrder
  menu?: Prisma.SortOrder
  included?: Prisma.SortOrder
  houseRules?: Prisma.SortOrder
  location?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
  _count?: Prisma.DinnerCountOrderByAggregateInput
  _avg?: Prisma.DinnerAvgOrderByAggregateInput
  _max?: Prisma.DinnerMaxOrderByAggregateInput
  _min?: Prisma.DinnerMinOrderByAggregateInput
  _sum?: Prisma.DinnerSumOrderByAggregateInput
}

export type DinnerScalarWhereWithAggregatesInput = {
  AND?: Prisma.DinnerScalarWhereWithAggregatesInput | Prisma.DinnerScalarWhereWithAggregatesInput[]
  OR?: Prisma.DinnerScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DinnerScalarWhereWithAggregatesInput | Prisma.DinnerScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  title?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  description?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  price?: Prisma.FloatWithAggregatesFilter<"Dinner"> | number
  currency?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"Dinner"> | Date | string
  time?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  duration?: Prisma.IntWithAggregatesFilter<"Dinner"> | number
  capacity?: Prisma.IntWithAggregatesFilter<"Dinner"> | number
  available?: Prisma.IntWithAggregatesFilter<"Dinner"> | number
  images?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  cuisine?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  dietary?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  rating?: Prisma.FloatWithAggregatesFilter<"Dinner"> | number
  reviewCount?: Prisma.IntWithAggregatesFilter<"Dinner"> | number
  instantBook?: Prisma.BoolWithAggregatesFilter<"Dinner"> | boolean
  menu?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  included?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  houseRules?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  location?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"Dinner"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Dinner"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Dinner"> | Date | string
  hostId?: Prisma.StringWithAggregatesFilter<"Dinner"> | string
}

export type DinnerCreateInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  host: Prisma.UserCreateNestedOneWithoutDinnersInput
  bookings?: Prisma.BookingCreateNestedManyWithoutDinnerInput
  reviews?: Prisma.ReviewCreateNestedManyWithoutDinnerInput
}

export type DinnerUncheckedCreateInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  hostId: string
  bookings?: Prisma.BookingUncheckedCreateNestedManyWithoutDinnerInput
  reviews?: Prisma.ReviewUncheckedCreateNestedManyWithoutDinnerInput
}

export type DinnerUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  host?: Prisma.UserUpdateOneRequiredWithoutDinnersNestedInput
  bookings?: Prisma.BookingUpdateManyWithoutDinnerNestedInput
  reviews?: Prisma.ReviewUpdateManyWithoutDinnerNestedInput
}

export type DinnerUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  bookings?: Prisma.BookingUncheckedUpdateManyWithoutDinnerNestedInput
  reviews?: Prisma.ReviewUncheckedUpdateManyWithoutDinnerNestedInput
}

export type DinnerCreateManyInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  hostId: string
}

export type DinnerUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DinnerUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type DinnerListRelationFilter = {
  every?: Prisma.DinnerWhereInput
  some?: Prisma.DinnerWhereInput
  none?: Prisma.DinnerWhereInput
}

export type DinnerOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DinnerCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  available?: Prisma.SortOrder
  images?: Prisma.SortOrder
  cuisine?: Prisma.SortOrder
  dietary?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  reviewCount?: Prisma.SortOrder
  instantBook?: Prisma.SortOrder
  menu?: Prisma.SortOrder
  included?: Prisma.SortOrder
  houseRules?: Prisma.SortOrder
  location?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
}

export type DinnerAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  available?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  reviewCount?: Prisma.SortOrder
}

export type DinnerMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  available?: Prisma.SortOrder
  images?: Prisma.SortOrder
  cuisine?: Prisma.SortOrder
  dietary?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  reviewCount?: Prisma.SortOrder
  instantBook?: Prisma.SortOrder
  menu?: Prisma.SortOrder
  included?: Prisma.SortOrder
  houseRules?: Prisma.SortOrder
  location?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
}

export type DinnerMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  date?: Prisma.SortOrder
  time?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  available?: Prisma.SortOrder
  images?: Prisma.SortOrder
  cuisine?: Prisma.SortOrder
  dietary?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  reviewCount?: Prisma.SortOrder
  instantBook?: Prisma.SortOrder
  menu?: Prisma.SortOrder
  included?: Prisma.SortOrder
  houseRules?: Prisma.SortOrder
  location?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  hostId?: Prisma.SortOrder
}

export type DinnerSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  capacity?: Prisma.SortOrder
  available?: Prisma.SortOrder
  rating?: Prisma.SortOrder
  reviewCount?: Prisma.SortOrder
}

export type DinnerScalarRelationFilter = {
  is?: Prisma.DinnerWhereInput
  isNot?: Prisma.DinnerWhereInput
}

export type DinnerCreateNestedManyWithoutHostInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutHostInput, Prisma.DinnerUncheckedCreateWithoutHostInput> | Prisma.DinnerCreateWithoutHostInput[] | Prisma.DinnerUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutHostInput | Prisma.DinnerCreateOrConnectWithoutHostInput[]
  createMany?: Prisma.DinnerCreateManyHostInputEnvelope
  connect?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
}

export type DinnerUncheckedCreateNestedManyWithoutHostInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutHostInput, Prisma.DinnerUncheckedCreateWithoutHostInput> | Prisma.DinnerCreateWithoutHostInput[] | Prisma.DinnerUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutHostInput | Prisma.DinnerCreateOrConnectWithoutHostInput[]
  createMany?: Prisma.DinnerCreateManyHostInputEnvelope
  connect?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
}

export type DinnerUpdateManyWithoutHostNestedInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutHostInput, Prisma.DinnerUncheckedCreateWithoutHostInput> | Prisma.DinnerCreateWithoutHostInput[] | Prisma.DinnerUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutHostInput | Prisma.DinnerCreateOrConnectWithoutHostInput[]
  upsert?: Prisma.DinnerUpsertWithWhereUniqueWithoutHostInput | Prisma.DinnerUpsertWithWhereUniqueWithoutHostInput[]
  createMany?: Prisma.DinnerCreateManyHostInputEnvelope
  set?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  disconnect?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  delete?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  connect?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  update?: Prisma.DinnerUpdateWithWhereUniqueWithoutHostInput | Prisma.DinnerUpdateWithWhereUniqueWithoutHostInput[]
  updateMany?: Prisma.DinnerUpdateManyWithWhereWithoutHostInput | Prisma.DinnerUpdateManyWithWhereWithoutHostInput[]
  deleteMany?: Prisma.DinnerScalarWhereInput | Prisma.DinnerScalarWhereInput[]
}

export type DinnerUncheckedUpdateManyWithoutHostNestedInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutHostInput, Prisma.DinnerUncheckedCreateWithoutHostInput> | Prisma.DinnerCreateWithoutHostInput[] | Prisma.DinnerUncheckedCreateWithoutHostInput[]
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutHostInput | Prisma.DinnerCreateOrConnectWithoutHostInput[]
  upsert?: Prisma.DinnerUpsertWithWhereUniqueWithoutHostInput | Prisma.DinnerUpsertWithWhereUniqueWithoutHostInput[]
  createMany?: Prisma.DinnerCreateManyHostInputEnvelope
  set?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  disconnect?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  delete?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  connect?: Prisma.DinnerWhereUniqueInput | Prisma.DinnerWhereUniqueInput[]
  update?: Prisma.DinnerUpdateWithWhereUniqueWithoutHostInput | Prisma.DinnerUpdateWithWhereUniqueWithoutHostInput[]
  updateMany?: Prisma.DinnerUpdateManyWithWhereWithoutHostInput | Prisma.DinnerUpdateManyWithWhereWithoutHostInput[]
  deleteMany?: Prisma.DinnerScalarWhereInput | Prisma.DinnerScalarWhereInput[]
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DinnerCreateNestedOneWithoutBookingsInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutBookingsInput, Prisma.DinnerUncheckedCreateWithoutBookingsInput>
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutBookingsInput
  connect?: Prisma.DinnerWhereUniqueInput
}

export type DinnerUpdateOneRequiredWithoutBookingsNestedInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutBookingsInput, Prisma.DinnerUncheckedCreateWithoutBookingsInput>
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutBookingsInput
  upsert?: Prisma.DinnerUpsertWithoutBookingsInput
  connect?: Prisma.DinnerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DinnerUpdateToOneWithWhereWithoutBookingsInput, Prisma.DinnerUpdateWithoutBookingsInput>, Prisma.DinnerUncheckedUpdateWithoutBookingsInput>
}

export type DinnerCreateNestedOneWithoutReviewsInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutReviewsInput, Prisma.DinnerUncheckedCreateWithoutReviewsInput>
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutReviewsInput
  connect?: Prisma.DinnerWhereUniqueInput
}

export type DinnerUpdateOneRequiredWithoutReviewsNestedInput = {
  create?: Prisma.XOR<Prisma.DinnerCreateWithoutReviewsInput, Prisma.DinnerUncheckedCreateWithoutReviewsInput>
  connectOrCreate?: Prisma.DinnerCreateOrConnectWithoutReviewsInput
  upsert?: Prisma.DinnerUpsertWithoutReviewsInput
  connect?: Prisma.DinnerWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DinnerUpdateToOneWithWhereWithoutReviewsInput, Prisma.DinnerUpdateWithoutReviewsInput>, Prisma.DinnerUncheckedUpdateWithoutReviewsInput>
}

export type DinnerCreateWithoutHostInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  bookings?: Prisma.BookingCreateNestedManyWithoutDinnerInput
  reviews?: Prisma.ReviewCreateNestedManyWithoutDinnerInput
}

export type DinnerUncheckedCreateWithoutHostInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  bookings?: Prisma.BookingUncheckedCreateNestedManyWithoutDinnerInput
  reviews?: Prisma.ReviewUncheckedCreateNestedManyWithoutDinnerInput
}

export type DinnerCreateOrConnectWithoutHostInput = {
  where: Prisma.DinnerWhereUniqueInput
  create: Prisma.XOR<Prisma.DinnerCreateWithoutHostInput, Prisma.DinnerUncheckedCreateWithoutHostInput>
}

export type DinnerCreateManyHostInputEnvelope = {
  data: Prisma.DinnerCreateManyHostInput | Prisma.DinnerCreateManyHostInput[]
  skipDuplicates?: boolean
}

export type DinnerUpsertWithWhereUniqueWithoutHostInput = {
  where: Prisma.DinnerWhereUniqueInput
  update: Prisma.XOR<Prisma.DinnerUpdateWithoutHostInput, Prisma.DinnerUncheckedUpdateWithoutHostInput>
  create: Prisma.XOR<Prisma.DinnerCreateWithoutHostInput, Prisma.DinnerUncheckedCreateWithoutHostInput>
}

export type DinnerUpdateWithWhereUniqueWithoutHostInput = {
  where: Prisma.DinnerWhereUniqueInput
  data: Prisma.XOR<Prisma.DinnerUpdateWithoutHostInput, Prisma.DinnerUncheckedUpdateWithoutHostInput>
}

export type DinnerUpdateManyWithWhereWithoutHostInput = {
  where: Prisma.DinnerScalarWhereInput
  data: Prisma.XOR<Prisma.DinnerUpdateManyMutationInput, Prisma.DinnerUncheckedUpdateManyWithoutHostInput>
}

export type DinnerScalarWhereInput = {
  AND?: Prisma.DinnerScalarWhereInput | Prisma.DinnerScalarWhereInput[]
  OR?: Prisma.DinnerScalarWhereInput[]
  NOT?: Prisma.DinnerScalarWhereInput | Prisma.DinnerScalarWhereInput[]
  id?: Prisma.StringFilter<"Dinner"> | string
  title?: Prisma.StringFilter<"Dinner"> | string
  description?: Prisma.StringFilter<"Dinner"> | string
  price?: Prisma.FloatFilter<"Dinner"> | number
  currency?: Prisma.StringFilter<"Dinner"> | string
  date?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  time?: Prisma.StringFilter<"Dinner"> | string
  duration?: Prisma.IntFilter<"Dinner"> | number
  capacity?: Prisma.IntFilter<"Dinner"> | number
  available?: Prisma.IntFilter<"Dinner"> | number
  images?: Prisma.StringFilter<"Dinner"> | string
  cuisine?: Prisma.StringFilter<"Dinner"> | string
  dietary?: Prisma.StringFilter<"Dinner"> | string
  rating?: Prisma.FloatFilter<"Dinner"> | number
  reviewCount?: Prisma.IntFilter<"Dinner"> | number
  instantBook?: Prisma.BoolFilter<"Dinner"> | boolean
  menu?: Prisma.StringFilter<"Dinner"> | string
  included?: Prisma.StringFilter<"Dinner"> | string
  houseRules?: Prisma.StringFilter<"Dinner"> | string
  location?: Prisma.StringFilter<"Dinner"> | string
  isActive?: Prisma.BoolFilter<"Dinner"> | boolean
  createdAt?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Dinner"> | Date | string
  hostId?: Prisma.StringFilter<"Dinner"> | string
}

export type DinnerCreateWithoutBookingsInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  host: Prisma.UserCreateNestedOneWithoutDinnersInput
  reviews?: Prisma.ReviewCreateNestedManyWithoutDinnerInput
}

export type DinnerUncheckedCreateWithoutBookingsInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  hostId: string
  reviews?: Prisma.ReviewUncheckedCreateNestedManyWithoutDinnerInput
}

export type DinnerCreateOrConnectWithoutBookingsInput = {
  where: Prisma.DinnerWhereUniqueInput
  create: Prisma.XOR<Prisma.DinnerCreateWithoutBookingsInput, Prisma.DinnerUncheckedCreateWithoutBookingsInput>
}

export type DinnerUpsertWithoutBookingsInput = {
  update: Prisma.XOR<Prisma.DinnerUpdateWithoutBookingsInput, Prisma.DinnerUncheckedUpdateWithoutBookingsInput>
  create: Prisma.XOR<Prisma.DinnerCreateWithoutBookingsInput, Prisma.DinnerUncheckedCreateWithoutBookingsInput>
  where?: Prisma.DinnerWhereInput
}

export type DinnerUpdateToOneWithWhereWithoutBookingsInput = {
  where?: Prisma.DinnerWhereInput
  data: Prisma.XOR<Prisma.DinnerUpdateWithoutBookingsInput, Prisma.DinnerUncheckedUpdateWithoutBookingsInput>
}

export type DinnerUpdateWithoutBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  host?: Prisma.UserUpdateOneRequiredWithoutDinnersNestedInput
  reviews?: Prisma.ReviewUpdateManyWithoutDinnerNestedInput
}

export type DinnerUncheckedUpdateWithoutBookingsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  reviews?: Prisma.ReviewUncheckedUpdateManyWithoutDinnerNestedInput
}

export type DinnerCreateWithoutReviewsInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  host: Prisma.UserCreateNestedOneWithoutDinnersInput
  bookings?: Prisma.BookingCreateNestedManyWithoutDinnerInput
}

export type DinnerUncheckedCreateWithoutReviewsInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  hostId: string
  bookings?: Prisma.BookingUncheckedCreateNestedManyWithoutDinnerInput
}

export type DinnerCreateOrConnectWithoutReviewsInput = {
  where: Prisma.DinnerWhereUniqueInput
  create: Prisma.XOR<Prisma.DinnerCreateWithoutReviewsInput, Prisma.DinnerUncheckedCreateWithoutReviewsInput>
}

export type DinnerUpsertWithoutReviewsInput = {
  update: Prisma.XOR<Prisma.DinnerUpdateWithoutReviewsInput, Prisma.DinnerUncheckedUpdateWithoutReviewsInput>
  create: Prisma.XOR<Prisma.DinnerCreateWithoutReviewsInput, Prisma.DinnerUncheckedCreateWithoutReviewsInput>
  where?: Prisma.DinnerWhereInput
}

export type DinnerUpdateToOneWithWhereWithoutReviewsInput = {
  where?: Prisma.DinnerWhereInput
  data: Prisma.XOR<Prisma.DinnerUpdateWithoutReviewsInput, Prisma.DinnerUncheckedUpdateWithoutReviewsInput>
}

export type DinnerUpdateWithoutReviewsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  host?: Prisma.UserUpdateOneRequiredWithoutDinnersNestedInput
  bookings?: Prisma.BookingUpdateManyWithoutDinnerNestedInput
}

export type DinnerUncheckedUpdateWithoutReviewsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  hostId?: Prisma.StringFieldUpdateOperationsInput | string
  bookings?: Prisma.BookingUncheckedUpdateManyWithoutDinnerNestedInput
}

export type DinnerCreateManyHostInput = {
  id?: string
  title: string
  description: string
  price: number
  currency?: string
  date: Date | string
  time: string
  duration: number
  capacity: number
  available: number
  images: string
  cuisine: string
  dietary: string
  rating?: number
  reviewCount?: number
  instantBook?: boolean
  menu: string
  included: string
  houseRules: string
  location: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DinnerUpdateWithoutHostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bookings?: Prisma.BookingUpdateManyWithoutDinnerNestedInput
  reviews?: Prisma.ReviewUpdateManyWithoutDinnerNestedInput
}

export type DinnerUncheckedUpdateWithoutHostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  bookings?: Prisma.BookingUncheckedUpdateManyWithoutDinnerNestedInput
  reviews?: Prisma.ReviewUncheckedUpdateManyWithoutDinnerNestedInput
}

export type DinnerUncheckedUpdateManyWithoutHostInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.FloatFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  time?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  capacity?: Prisma.IntFieldUpdateOperationsInput | number
  available?: Prisma.IntFieldUpdateOperationsInput | number
  images?: Prisma.StringFieldUpdateOperationsInput | string
  cuisine?: Prisma.StringFieldUpdateOperationsInput | string
  dietary?: Prisma.StringFieldUpdateOperationsInput | string
  rating?: Prisma.FloatFieldUpdateOperationsInput | number
  reviewCount?: Prisma.IntFieldUpdateOperationsInput | number
  instantBook?: Prisma.BoolFieldUpdateOperationsInput | boolean
  menu?: Prisma.StringFieldUpdateOperationsInput | string
  included?: Prisma.StringFieldUpdateOperationsInput | string
  houseRules?: Prisma.StringFieldUpdateOperationsInput | string
  location?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DinnerCountOutputType
 */

export type DinnerCountOutputType = {
  bookings: number
  reviews: number
}

export type DinnerCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  bookings?: boolean | DinnerCountOutputTypeCountBookingsArgs
  reviews?: boolean | DinnerCountOutputTypeCountReviewsArgs
}

/**
 * DinnerCountOutputType without action
 */
export type DinnerCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DinnerCountOutputType
   */
  select?: Prisma.DinnerCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DinnerCountOutputType without action
 */
export type DinnerCountOutputTypeCountBookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BookingWhereInput
}

/**
 * DinnerCountOutputType without action
 */
export type DinnerCountOutputTypeCountReviewsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ReviewWhereInput
}


export type DinnerSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  price?: boolean
  currency?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  capacity?: boolean
  available?: boolean
  images?: boolean
  cuisine?: boolean
  dietary?: boolean
  rating?: boolean
  reviewCount?: boolean
  instantBook?: boolean
  menu?: boolean
  included?: boolean
  houseRules?: boolean
  location?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  hostId?: boolean
  host?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  bookings?: boolean | Prisma.Dinner$bookingsArgs<ExtArgs>
  reviews?: boolean | Prisma.Dinner$reviewsArgs<ExtArgs>
  _count?: boolean | Prisma.DinnerCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dinner"]>

export type DinnerSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  price?: boolean
  currency?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  capacity?: boolean
  available?: boolean
  images?: boolean
  cuisine?: boolean
  dietary?: boolean
  rating?: boolean
  reviewCount?: boolean
  instantBook?: boolean
  menu?: boolean
  included?: boolean
  houseRules?: boolean
  location?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  hostId?: boolean
  host?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dinner"]>

export type DinnerSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  price?: boolean
  currency?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  capacity?: boolean
  available?: boolean
  images?: boolean
  cuisine?: boolean
  dietary?: boolean
  rating?: boolean
  reviewCount?: boolean
  instantBook?: boolean
  menu?: boolean
  included?: boolean
  houseRules?: boolean
  location?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  hostId?: boolean
  host?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dinner"]>

export type DinnerSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  price?: boolean
  currency?: boolean
  date?: boolean
  time?: boolean
  duration?: boolean
  capacity?: boolean
  available?: boolean
  images?: boolean
  cuisine?: boolean
  dietary?: boolean
  rating?: boolean
  reviewCount?: boolean
  instantBook?: boolean
  menu?: boolean
  included?: boolean
  houseRules?: boolean
  location?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  hostId?: boolean
}

export type DinnerOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "price" | "currency" | "date" | "time" | "duration" | "capacity" | "available" | "images" | "cuisine" | "dietary" | "rating" | "reviewCount" | "instantBook" | "menu" | "included" | "houseRules" | "location" | "isActive" | "createdAt" | "updatedAt" | "hostId", ExtArgs["result"]["dinner"]>
export type DinnerInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  host?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  bookings?: boolean | Prisma.Dinner$bookingsArgs<ExtArgs>
  reviews?: boolean | Prisma.Dinner$reviewsArgs<ExtArgs>
  _count?: boolean | Prisma.DinnerCountOutputTypeDefaultArgs<ExtArgs>
}
export type DinnerIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  host?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type DinnerIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  host?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $DinnerPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Dinner"
  objects: {
    host: Prisma.$UserPayload<ExtArgs>
    bookings: Prisma.$BookingPayload<ExtArgs>[]
    reviews: Prisma.$ReviewPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    description: string
    price: number
    currency: string
    date: Date
    time: string
    duration: number
    capacity: number
    available: number
    images: string
    cuisine: string
    dietary: string
    rating: number
    reviewCount: number
    instantBook: boolean
    menu: string
    included: string
    houseRules: string
    location: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    hostId: string
  }, ExtArgs["result"]["dinner"]>
  composites: {}
}

export type DinnerGetPayload<S extends boolean | null | undefined | DinnerDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DinnerPayload, S>

export type DinnerCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DinnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DinnerCountAggregateInputType | true
  }

export interface DinnerDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dinner'], meta: { name: 'Dinner' } }
  /**
   * Find zero or one Dinner that matches the filter.
   * @param {DinnerFindUniqueArgs} args - Arguments to find a Dinner
   * @example
   * // Get one Dinner
   * const dinner = await prisma.dinner.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DinnerFindUniqueArgs>(args: Prisma.SelectSubset<T, DinnerFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Dinner that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DinnerFindUniqueOrThrowArgs} args - Arguments to find a Dinner
   * @example
   * // Get one Dinner
   * const dinner = await prisma.dinner.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DinnerFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DinnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Dinner that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DinnerFindFirstArgs} args - Arguments to find a Dinner
   * @example
   * // Get one Dinner
   * const dinner = await prisma.dinner.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DinnerFindFirstArgs>(args?: Prisma.SelectSubset<T, DinnerFindFirstArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Dinner that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DinnerFindFirstOrThrowArgs} args - Arguments to find a Dinner
   * @example
   * // Get one Dinner
   * const dinner = await prisma.dinner.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DinnerFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DinnerFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Dinners that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DinnerFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Dinners
   * const dinners = await prisma.dinner.findMany()
   * 
   * // Get first 10 Dinners
   * const dinners = await prisma.dinner.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dinnerWithIdOnly = await prisma.dinner.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DinnerFindManyArgs>(args?: Prisma.SelectSubset<T, DinnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Dinner.
   * @param {DinnerCreateArgs} args - Arguments to create a Dinner.
   * @example
   * // Create one Dinner
   * const Dinner = await prisma.dinner.create({
   *   data: {
   *     // ... data to create a Dinner
   *   }
   * })
   * 
   */
  create<T extends DinnerCreateArgs>(args: Prisma.SelectSubset<T, DinnerCreateArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Dinners.
   * @param {DinnerCreateManyArgs} args - Arguments to create many Dinners.
   * @example
   * // Create many Dinners
   * const dinner = await prisma.dinner.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DinnerCreateManyArgs>(args?: Prisma.SelectSubset<T, DinnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Dinners and returns the data saved in the database.
   * @param {DinnerCreateManyAndReturnArgs} args - Arguments to create many Dinners.
   * @example
   * // Create many Dinners
   * const dinner = await prisma.dinner.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Dinners and only return the `id`
   * const dinnerWithIdOnly = await prisma.dinner.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DinnerCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DinnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Dinner.
   * @param {DinnerDeleteArgs} args - Arguments to delete one Dinner.
   * @example
   * // Delete one Dinner
   * const Dinner = await prisma.dinner.delete({
   *   where: {
   *     // ... filter to delete one Dinner
   *   }
   * })
   * 
   */
  delete<T extends DinnerDeleteArgs>(args: Prisma.SelectSubset<T, DinnerDeleteArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Dinner.
   * @param {DinnerUpdateArgs} args - Arguments to update one Dinner.
   * @example
   * // Update one Dinner
   * const dinner = await prisma.dinner.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DinnerUpdateArgs>(args: Prisma.SelectSubset<T, DinnerUpdateArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Dinners.
   * @param {DinnerDeleteManyArgs} args - Arguments to filter Dinners to delete.
   * @example
   * // Delete a few Dinners
   * const { count } = await prisma.dinner.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DinnerDeleteManyArgs>(args?: Prisma.SelectSubset<T, DinnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Dinners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DinnerUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Dinners
   * const dinner = await prisma.dinner.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DinnerUpdateManyArgs>(args: Prisma.SelectSubset<T, DinnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Dinners and returns the data updated in the database.
   * @param {DinnerUpdateManyAndReturnArgs} args - Arguments to update many Dinners.
   * @example
   * // Update many Dinners
   * const dinner = await prisma.dinner.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Dinners and only return the `id`
   * const dinnerWithIdOnly = await prisma.dinner.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DinnerUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DinnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Dinner.
   * @param {DinnerUpsertArgs} args - Arguments to update or create a Dinner.
   * @example
   * // Update or create a Dinner
   * const dinner = await prisma.dinner.upsert({
   *   create: {
   *     // ... data to create a Dinner
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Dinner we want to update
   *   }
   * })
   */
  upsert<T extends DinnerUpsertArgs>(args: Prisma.SelectSubset<T, DinnerUpsertArgs<ExtArgs>>): Prisma.Prisma__DinnerClient<runtime.Types.Result.GetResult<Prisma.$DinnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Dinners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DinnerCountArgs} args - Arguments to filter Dinners to count.
   * @example
   * // Count the number of Dinners
   * const count = await prisma.dinner.count({
   *   where: {
   *     // ... the filter for the Dinners we want to count
   *   }
   * })
  **/
  count<T extends DinnerCountArgs>(
    args?: Prisma.Subset<T, DinnerCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DinnerCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Dinner.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DinnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DinnerAggregateArgs>(args: Prisma.Subset<T, DinnerAggregateArgs>): Prisma.PrismaPromise<GetDinnerAggregateType<T>>

  /**
   * Group by Dinner.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DinnerGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DinnerGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DinnerGroupByArgs['orderBy'] }
      : { orderBy?: DinnerGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DinnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDinnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Dinner model
 */
readonly fields: DinnerFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Dinner.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DinnerClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  host<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  bookings<T extends Prisma.Dinner$bookingsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Dinner$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  reviews<T extends Prisma.Dinner$reviewsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Dinner$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Dinner model
 */
export interface DinnerFieldRefs {
  readonly id: Prisma.FieldRef<"Dinner", 'String'>
  readonly title: Prisma.FieldRef<"Dinner", 'String'>
  readonly description: Prisma.FieldRef<"Dinner", 'String'>
  readonly price: Prisma.FieldRef<"Dinner", 'Float'>
  readonly currency: Prisma.FieldRef<"Dinner", 'String'>
  readonly date: Prisma.FieldRef<"Dinner", 'DateTime'>
  readonly time: Prisma.FieldRef<"Dinner", 'String'>
  readonly duration: Prisma.FieldRef<"Dinner", 'Int'>
  readonly capacity: Prisma.FieldRef<"Dinner", 'Int'>
  readonly available: Prisma.FieldRef<"Dinner", 'Int'>
  readonly images: Prisma.FieldRef<"Dinner", 'String'>
  readonly cuisine: Prisma.FieldRef<"Dinner", 'String'>
  readonly dietary: Prisma.FieldRef<"Dinner", 'String'>
  readonly rating: Prisma.FieldRef<"Dinner", 'Float'>
  readonly reviewCount: Prisma.FieldRef<"Dinner", 'Int'>
  readonly instantBook: Prisma.FieldRef<"Dinner", 'Boolean'>
  readonly menu: Prisma.FieldRef<"Dinner", 'String'>
  readonly included: Prisma.FieldRef<"Dinner", 'String'>
  readonly houseRules: Prisma.FieldRef<"Dinner", 'String'>
  readonly location: Prisma.FieldRef<"Dinner", 'String'>
  readonly isActive: Prisma.FieldRef<"Dinner", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Dinner", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Dinner", 'DateTime'>
  readonly hostId: Prisma.FieldRef<"Dinner", 'String'>
}
    

// Custom InputTypes
/**
 * Dinner findUnique
 */
export type DinnerFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * Filter, which Dinner to fetch.
   */
  where: Prisma.DinnerWhereUniqueInput
}

/**
 * Dinner findUniqueOrThrow
 */
export type DinnerFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * Filter, which Dinner to fetch.
   */
  where: Prisma.DinnerWhereUniqueInput
}

/**
 * Dinner findFirst
 */
export type DinnerFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * Filter, which Dinner to fetch.
   */
  where?: Prisma.DinnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Dinners to fetch.
   */
  orderBy?: Prisma.DinnerOrderByWithRelationInput | Prisma.DinnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Dinners.
   */
  cursor?: Prisma.DinnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Dinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Dinners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Dinners.
   */
  distinct?: Prisma.DinnerScalarFieldEnum | Prisma.DinnerScalarFieldEnum[]
}

/**
 * Dinner findFirstOrThrow
 */
export type DinnerFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * Filter, which Dinner to fetch.
   */
  where?: Prisma.DinnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Dinners to fetch.
   */
  orderBy?: Prisma.DinnerOrderByWithRelationInput | Prisma.DinnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Dinners.
   */
  cursor?: Prisma.DinnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Dinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Dinners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Dinners.
   */
  distinct?: Prisma.DinnerScalarFieldEnum | Prisma.DinnerScalarFieldEnum[]
}

/**
 * Dinner findMany
 */
export type DinnerFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * Filter, which Dinners to fetch.
   */
  where?: Prisma.DinnerWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Dinners to fetch.
   */
  orderBy?: Prisma.DinnerOrderByWithRelationInput | Prisma.DinnerOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Dinners.
   */
  cursor?: Prisma.DinnerWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Dinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Dinners.
   */
  skip?: number
  distinct?: Prisma.DinnerScalarFieldEnum | Prisma.DinnerScalarFieldEnum[]
}

/**
 * Dinner create
 */
export type DinnerCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * The data needed to create a Dinner.
   */
  data: Prisma.XOR<Prisma.DinnerCreateInput, Prisma.DinnerUncheckedCreateInput>
}

/**
 * Dinner createMany
 */
export type DinnerCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Dinners.
   */
  data: Prisma.DinnerCreateManyInput | Prisma.DinnerCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Dinner createManyAndReturn
 */
export type DinnerCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * The data used to create many Dinners.
   */
  data: Prisma.DinnerCreateManyInput | Prisma.DinnerCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Dinner update
 */
export type DinnerUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * The data needed to update a Dinner.
   */
  data: Prisma.XOR<Prisma.DinnerUpdateInput, Prisma.DinnerUncheckedUpdateInput>
  /**
   * Choose, which Dinner to update.
   */
  where: Prisma.DinnerWhereUniqueInput
}

/**
 * Dinner updateMany
 */
export type DinnerUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Dinners.
   */
  data: Prisma.XOR<Prisma.DinnerUpdateManyMutationInput, Prisma.DinnerUncheckedUpdateManyInput>
  /**
   * Filter which Dinners to update
   */
  where?: Prisma.DinnerWhereInput
  /**
   * Limit how many Dinners to update.
   */
  limit?: number
}

/**
 * Dinner updateManyAndReturn
 */
export type DinnerUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * The data used to update Dinners.
   */
  data: Prisma.XOR<Prisma.DinnerUpdateManyMutationInput, Prisma.DinnerUncheckedUpdateManyInput>
  /**
   * Filter which Dinners to update
   */
  where?: Prisma.DinnerWhereInput
  /**
   * Limit how many Dinners to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Dinner upsert
 */
export type DinnerUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * The filter to search for the Dinner to update in case it exists.
   */
  where: Prisma.DinnerWhereUniqueInput
  /**
   * In case the Dinner found by the `where` argument doesn't exist, create a new Dinner with this data.
   */
  create: Prisma.XOR<Prisma.DinnerCreateInput, Prisma.DinnerUncheckedCreateInput>
  /**
   * In case the Dinner was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DinnerUpdateInput, Prisma.DinnerUncheckedUpdateInput>
}

/**
 * Dinner delete
 */
export type DinnerDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
  /**
   * Filter which Dinner to delete.
   */
  where: Prisma.DinnerWhereUniqueInput
}

/**
 * Dinner deleteMany
 */
export type DinnerDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Dinners to delete
   */
  where?: Prisma.DinnerWhereInput
  /**
   * Limit how many Dinners to delete.
   */
  limit?: number
}

/**
 * Dinner.bookings
 */
export type Dinner$bookingsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Booking
   */
  select?: Prisma.BookingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Booking
   */
  omit?: Prisma.BookingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BookingInclude<ExtArgs> | null
  where?: Prisma.BookingWhereInput
  orderBy?: Prisma.BookingOrderByWithRelationInput | Prisma.BookingOrderByWithRelationInput[]
  cursor?: Prisma.BookingWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.BookingScalarFieldEnum | Prisma.BookingScalarFieldEnum[]
}

/**
 * Dinner.reviews
 */
export type Dinner$reviewsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Review
   */
  select?: Prisma.ReviewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Review
   */
  omit?: Prisma.ReviewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ReviewInclude<ExtArgs> | null
  where?: Prisma.ReviewWhereInput
  orderBy?: Prisma.ReviewOrderByWithRelationInput | Prisma.ReviewOrderByWithRelationInput[]
  cursor?: Prisma.ReviewWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ReviewScalarFieldEnum | Prisma.ReviewScalarFieldEnum[]
}

/**
 * Dinner without action
 */
export type DinnerDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Dinner
   */
  select?: Prisma.DinnerSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Dinner
   */
  omit?: Prisma.DinnerOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DinnerInclude<ExtArgs> | null
}
