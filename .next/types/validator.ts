// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/auth/callback/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/callback">> = Specific
  const handler = {} as typeof import("../../app/auth/callback/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/error/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/error">> = Specific
  const handler = {} as typeof import("../../app/auth/error/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/role-selection/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/role-selection">> = Specific
  const handler = {} as typeof import("../../app/auth/role-selection/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/signin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/signin">> = Specific
  const handler = {} as typeof import("../../app/auth/signin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/signup/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/signup">> = Specific
  const handler = {} as typeof import("../../app/auth/signup/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/booking/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/booking">> = Specific
  const handler = {} as typeof import("../../app/booking/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dinners/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dinners/[id]">> = Specific
  const handler = {} as typeof import("../../app/dinners/[id]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/help-center/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/help-center">> = Specific
  const handler = {} as typeof import("../../app/help-center/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/host/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/host/dashboard">> = Specific
  const handler = {} as typeof import("../../app/host/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/host/dinners/create/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/host/dinners/create">> = Specific
  const handler = {} as typeof import("../../app/host/dinners/create/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/host/onboarding/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/host/onboarding">> = Specific
  const handler = {} as typeof import("../../app/host/onboarding/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/how-it-works/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/how-it-works">> = Specific
  const handler = {} as typeof import("../../app/how-it-works/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/privacy-policy/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/privacy-policy">> = Specific
  const handler = {} as typeof import("../../app/privacy-policy/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/profile">> = Specific
  const handler = {} as typeof import("../../app/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/search/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/search">> = Specific
  const handler = {} as typeof import("../../app/search/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/terms-of-use/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/terms-of-use">> = Specific
  const handler = {} as typeof import("../../app/terms-of-use/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/[...nextauth]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/[...nextauth]">> = Specific
  const handler = {} as typeof import("../../app/api/auth/[...nextauth]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/check-role-selection/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/check-role-selection">> = Specific
  const handler = {} as typeof import("../../app/api/auth/check-role-selection/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/current-user/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/current-user">> = Specific
  const handler = {} as typeof import("../../app/api/auth/current-user/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/register/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/register">> = Specific
  const handler = {} as typeof import("../../app/api/auth/register/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/auth/update-role/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth/update-role">> = Specific
  const handler = {} as typeof import("../../app/api/auth/update-role/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/search/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/search">> = Specific
  const handler = {} as typeof import("../../app/search/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
